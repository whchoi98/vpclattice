---
apiVersion: v1
kind: Namespace
metadata:
  name: assets
  labels:
    app.kubernetes.io/created-by: retail-store-sample
---
apiVersion: v1
kind: Namespace
metadata:
  name: carts
  labels:
    app.kubernetes.io/created-by: retail-store-sample
---
apiVersion: v1
kind: Namespace
metadata:
  name: catalog
  labels:
    app.kubernetes.io/created-by: retail-store-sample
---
apiVersion: v1
kind: Namespace
metadata:
  name: ui
  labels:
    app.kubernetes.io/created-by: retail-store-sample
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: assets
  namespace: assets
  labels:
    app.kubernetes.io/created-by: retail-store-sample
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: carts
  namespace: carts
  labels:
    app.kubernetes.io/created-by: retail-store-sample
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: catalog
  namespace: catalog
  labels:
    app.kubernetes.io/created-by: retail-store-sample
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ui
  namespace: ui
  labels:
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: ui
    app.kubernetes.io/name: ui
    app.kubernetes.io/created-by: retail-store-sample
---
apiVersion: v1
kind: ConfigMap
data:
  PORT: "8080"
metadata:
  name: assets
  namespace: assets
  labels:
    app.kubernetes.io/created-by: retail-store-sample
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: carts
  namespace: carts
  labels:
    app.kubernetes.io/created-by: retail-store-sample
data:
  AWS_ACCESS_KEY_ID: key
  AWS_SECRET_ACCESS_KEY: secret
  CARTS_DYNAMODB_CREATETABLE: "true"
  CARTS_DYNAMODB_ENDPOINT: http://carts-dynamodb:8000
  CARTS_DYNAMODB_TABLENAME: Items
---
apiVersion: v1
kind: ConfigMap
data: null
metadata:
  name: catalog
  namespace: catalog
  labels:
    app.kubernetes.io/created-by: retail-store-sample
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ui
  namespace: ui
  labels:
    app.kubernetes.io/created-by: retail-store-sample
data:
  ENDPOINTS_ASSETS: http://assets-${CLUSTER1_NAME}.lattice.io
  ENDPOINTS_CARTS: http://cart-${CLUSTER1_NAME}.lattice.io
  ENDPOINTS_CATALOG: http://catalog-${CLUSTER1_NAME}.lattice.io
---
apiVersion: v1
kind: Secret
metadata:
  name: catalog-db
  namespace: catalog
  labels:
    app.kubernetes.io/created-by: retail-store-sample
data:
  endpoint: Y2F0YWxvZy1teXNxbDozMzA2
  name: Y2F0YWxvZw==
  password: ZGVmYXVsdF9wYXNzd29yZA==
  username: Y2F0YWxvZ191c2Vy
---
apiVersion: v1
kind: Service
metadata:
  name: assets
  namespace: assets
  labels:
    app.kubernetes.io/created-by: retail-store-sample
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: assets
    app.kubernetes.io/name: assets
---
apiVersion: v1
kind: Service
metadata:
  name: carts
  namespace: carts
  labels:
    app.kubernetes.io/created-by: retail-store-sample
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: carts
    app.kubernetes.io/name: carts
---
apiVersion: v1
kind: Service
metadata:
  name: carts-dynamodb
  namespace: carts
  labels:
    app.kubernetes.io/created-by: retail-store-sample
spec:
  type: ClusterIP
  ports:
  - name: dynamodb
    port: 8000
    protocol: TCP
    targetPort: dynamodb
  selector:
    app.kubernetes.io/component: dynamodb
    app.kubernetes.io/instance: carts
    app.kubernetes.io/name: carts
---
apiVersion: v1
kind: Service
metadata:
  name: catalog
  namespace: catalog
  labels:
    app.kubernetes.io/created-by: retail-store-sample
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/name: catalog
---
apiVersion: v1
kind: Service
metadata:
  name: catalog-mysql
  namespace: catalog
  labels:
    app.kubernetes.io/created-by: retail-store-sample
spec:
  type: ClusterIP
  ports:
  - name: mysql
    port: 3306
    protocol: TCP
    targetPort: mysql
  selector:
    app.kubernetes.io/component: mysql
    app.kubernetes.io/instance: catalog
    app.kubernetes.io/name: catalog
---
apiVersion: v1
kind: Service
metadata:
  name: ui
  namespace: ui
  labels:
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: ui
    app.kubernetes.io/name: ui
    app.kubernetes.io/created-by: retail-store-sample
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: ui
    app.kubernetes.io/name: ui
---
apiVersion: v1
kind: Service
metadata:
  name: ui-lb
  namespace: ui
  labels:
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: ui
    app.kubernetes.io/name: ui
    app.kubernetes.io/created-by: retail-store-sample
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/component: service
    app.kubernetes.io/instance: ui
    app.kubernetes.io/name: ui
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: assets
  namespace: assets
  labels:
    app.kubernetes.io/created-by: retail-store-sample
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: assets
      app.kubernetes.io/name: assets
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/component: service
        app.kubernetes.io/created-by: retail-store-sample
        app.kubernetes.io/instance: assets
        app.kubernetes.io/name: assets
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: assets
        image: public.ecr.aws/aws-containers/retail-store-sample-assets:0.2.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health.html
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 3
        name: assets
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 128Mi
          requests:
            cpu: 128m
            memory: 128Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext: {}
      serviceAccountName: assets
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts
  namespace: carts
  labels:
    app.kubernetes.io/created-by: retail-store-sample
    app.kubernetes.io/type: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: carts
      app.kubernetes.io/name: carts
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "80801"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/component: service
        app.kubernetes.io/created-by: retail-store-sample
        app.kubernetes.io/instance: carts
        app.kubernetes.io/name: carts
    spec:
      containers:
      - env:
        - name: JAVA_OPTS
          value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
        - name: SPRING_PROFILES_ACTIVE
          value: dynamodb
        envFrom:
        - configMapRef:
            name: carts
        image: public.ecr.aws/aws-containers/retail-store-sample-cart:0.2.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 45
          periodSeconds: 3
        name: carts
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 128m
            memory: 512Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext:
        fsGroup: 1000
      serviceAccountName: carts
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: carts-dynamodb
  namespace: carts
  labels:
    app.kubernetes.io/created-by: retail-store-sample
    app.kubernetes.io/team: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: dynamodb
      app.kubernetes.io/instance: carts
      app.kubernetes.io/name: carts
  template:
    metadata:
      labels:
        app.kubernetes.io/component: dynamodb
        app.kubernetes.io/created-by: retail-store-sample
        app.kubernetes.io/instance: carts
        app.kubernetes.io/name: carts
        app.kubernetes.io/team: database
    spec:
      containers:
      - image: amazon/dynamodb-local:1.13.1
        imagePullPolicy: IfNotPresent
        name: dynamodb
        ports:
        - containerPort: 8000
          name: dynamodb
          protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog
  namespace: catalog
  labels:
    app.kubernetes.io/created-by: retail-store-sample
    app.kubernetes.io/type: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: catalog
      app.kubernetes.io/name: catalog
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/component: service
        app.kubernetes.io/created-by: retail-store-sample
        app.kubernetes.io/instance: catalog
        app.kubernetes.io/name: catalog
    spec:
      containers:
      - env:
        - name: DB_ENDPOINT
          valueFrom:
            secretKeyRef:
              key: endpoint
              name: catalog-db
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: catalog-db
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: catalog-db
        - name: DB_READ_ENDPOINT
          valueFrom:
            secretKeyRef:
              key: endpoint
              name: catalog-db
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              key: name
              name: catalog-db
        envFrom:
        - configMapRef:
            name: catalog
        image: public.ecr.aws/aws-containers/retail-store-sample-catalog:0.2.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 3
        name: catalog
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          periodSeconds: 5
          successThreshold: 3
        resources:
          limits:
            memory: 256Mi
          requests:
            cpu: 128m
            memory: 256Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext:
        fsGroup: 1000
      serviceAccountName: catalog
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog-mysql
  namespace: catalog
  labels:
    app.kubernetes.io/created-by: retail-store-sample
    app.kubernetes.io/team: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: mysql
      app.kubernetes.io/instance: catalog
      app.kubernetes.io/name: catalog
  template:
    metadata:
      labels:
        app.kubernetes.io/component: mysql
        app.kubernetes.io/created-by: retail-store-sample
        app.kubernetes.io/instance: catalog
        app.kubernetes.io/name: catalog
        app.kubernetes.io/team: database
    spec:
      containers:
      - env:
        - name: MYSQL_ROOT_PASSWORD
          value: my-secret-pw
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: catalog-db
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: catalog-db
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              key: name
              name: catalog-db
        image: mysql:5.7
        imagePullPolicy: IfNotPresent
        name: mysql
        ports:
        - containerPort: 3306
          name: mysql
          protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
  namespace: ui
  labels:
    app.kubernetes.io/created-by: retail-store-sample
    app.kubernetes.io/type: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: service
      app.kubernetes.io/instance: ui
      app.kubernetes.io/name: ui
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/component: service
        app.kubernetes.io/created-by: retail-store-sample
        app.kubernetes.io/instance: ui
        app.kubernetes.io/name: ui
    spec:
      containers:
      - env:
        - name: JAVA_OPTS
          value: -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/urandom
        envFrom:
        - configMapRef:
            name: ui
        image: public.ecr.aws/aws-containers/retail-store-sample-ui:0.2.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 45
          periodSeconds: 20
        name: ui
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 128m
            memory: 512Mi
        securityContext:
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      securityContext:
        fsGroup: 1000
      serviceAccountName: ui
      volumes:
      - emptyDir:
          medium: Memory
        name: tmp-volume
